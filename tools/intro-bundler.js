const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const writeFile = promisify(fs.writeFile);
const readFile = promisify(fs.readFile);
const budo = require('budo');
const CleanCSS = require('clean-css');
const htmlMinify = require('html-minifier').minify;
const htmlMinifyOptions = {
  'caseSensitive': false,
  'collapseBooleanAttributes': true,
  'collapseInlineTagWhitespace': false,
  'collapseWhitespace': true,
  'conservativeCollapse': false,
  'decodeEntities': true,
  'html5': true,
  'minifyJS': false,
  'includeAutoGeneratedTags': false,
  'keepClosingSlash': false,
  'preserveLineBreaks': false,
  'preventAttributesEscaping': false,
  'processConditionalComments': true,
  'removeAttributeQuotes': true,
  'removeComments': true,
  'removeEmptyAttributes': true,
  'removeEmptyElements': false,
  'removeOptionalTags': false,
  'removeRedundantAttributes': true,
  'removeScriptTypeAttributes': true,
  'removeStyleLinkTypeAttributes': true,
  'removeTagWhitespace': true,
  'sortAttributes': true,
  'sortClassName': true,
  'trimCustomFragments': true,
  'useShortDoctype': true
};

const srcCss = path.resolve(__dirname, '../src/main.css');
const srcHtml = path.resolve(__dirname, '../src/index.html');

const style = async () => {
  const file = await readFile(srcCss, 'utf-8');
  const cleanFile = new CleanCSS().minify(file).styles;
  await writeFile(path.resolve(__dirname, '../public/bundle.css'), cleanFile);
};

const html = async () => {
  const file = await readFile(srcHtml, 'utf-8');
  const cleanFile = htmlMinify(file, htmlMinifyOptions);
  await writeFile(path.resolve(__dirname, '../public/index.html'), cleanFile);
};

const start = async () => {
  await style();
  await html();
  const app = budo('./src/index.js', {
    serve: 'bundle.js',
    dir: 'public',
    stream: process.stdout
    // browserify: { plugin }
  })
    .watch()
    .live()
    .on('watch',
      (ev, file) => {
        if (/\.css$/i.test(file)) {
          if (path.resolve(file) === srcCss) {
            style();
          } else {
            app.reload(file);
            // checkSize();
          }
        } else if (/\.html$/i.test(file)) {
          if (path.resolve(file) === srcHtml) {
            html();
          } else {
            app.reload(file);
            // checkSize();
          }
        }
      })
    .on('pending', () => app.reload());
};

start();
